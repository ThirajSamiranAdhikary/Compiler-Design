%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include"lex.yy.c"
FILE *fpout;

void yyerror(const char *s);
int yylex();
int yywrap();
void insertType(); 		/*insert data type into the type array */
void insertdef(); 		/*insert  class, function and attribute key words type into the type2 array */
void addtoSymbolTable(char); 		 /* creating symbol table */
int search(char* );  		/* search function to check existing inside the symbol table */
int reservedWord(char c); 		/*compare with reserved words */
type_checking_error(char *type1, char *type2);
void check_declaration(char *c);
void check_return_type(char *value1,char *value2);
int check_types(char *type1, char *type2);
char *get_type(char *var);
struct node* make_node(struct node *left, struct node *right, char *token)  // to create nodes

/* intermediate code generation */
void addQuadruple(char [],char [],char [],char []);
void push(char*);
char* pop();
int temp_var=0;

/*-------------------------------------- */ 

/* struct to create symbol table */
struct details{
    char* id;
    char* datatype;
    char* type; 
    int lineno;

}symbolTable[100];

int count=0;  
int q;
char type[10]; 		/* to store type of the data */
char type2[20]; 		/* to store class, function and attribute key words */
extern int lineNum;
int sem_errors=0; 		/* get the error number */

struct node *head;   /* start node of the AST  */


/* node definition */
struct node { 
	struct node *left; 
	struct node *right; 
	char *token; 
    };


int label=0;
char buff[100];
char errors[10][100];
char reserved[22][10] = {"int", "float", "class", "function", "if", "else", "for", "public", "return", "private","read","write",
"id","eq","neq","lt","gt","leq","geq","or","and","void"}; 		/* reserved keywords*/

/* -------------------------------------------------- */ 
/* structure to 3 address code  of Quadruple with one operator, two operands and one result*/
  struct Quadruple
  {
    char operator[5];
    char operand1[10];
    char operand2[10];
    char result[10];
  }quad[50];


  /* stack to 3 adress code */ 
  struct Stack
  {
    char *items[10];
    int top;
  }stk;








/* -------------------------------------------------- */

%}



%union {
    int iValue;                 /* integer value */
    double dValue;				/* double value */

	struct nodeDef { 
		char name[100]; 
		struct node* nd;
	} ndOb; 


	struct icg { 
			char name[100]; 
			struct node* nd;
			char type[5];
		} icg1;
 
};

%token <iValue> INTEGER
%token <dValue> DOUBLE
%token <sValue> VARIABLE

%token VOID
%token <ndOb> ATTRIBUTE CLASS CONTRUCTOR FLOAT FUNCTION INTEGER ISA LOCALVAR PRIVATE PUBLIC READ RETURN SELF THEN  WRITE WHILE IF PRINT
%nonassoc IFX
%nonassoc ELSE
%nonassoc EQOP NEQ

%type <ndOb> prog buildClassOrFunc classDecl idlist idEx visibilitymemberDeclTail visibility memberDecl memberFuncDecl memberVarDecl arraySizeList arraySize funcDef funcHead idsrTail funcBody localVarDeclOrStmtTail localVarDeclOrStmt localVarDecl statement assignStat statBlock statementTail expr relExpr arithExpr term factor sign variable idnestList indiceList functionCall idnest indice type returnType 
fParams aParams fParamsTail aParamsTail assignOp relOp addOp multOp

%type <icg1> 


%left OR
%left AND
%left EQ NEQ LT GT LEQ GEQ
%left PLUS MINUS
%left MULT DIV
%left NOT
%nonassoc UMINUS

%type <nPtr> stmt expr stmt_list



%%

prog: buildClassOrFunc ;

buildClassOrFunc : classDecl | funcDef  ;

classDecl :  CLASS {insertdef();}ID {reservedWord($2); addtoSymbolTable("CL"); } isaidList commaidList { visibilitymemberDeclTail }';' ;
isaidList : ISA ID {reservedWord($2);}  | ;
commaidList :commaidList |"," ID {reservedWord($2);} |  ;

visibilitymemberDeclTail : visibilitymemberDeclTail | visibility memberDecl |  ;
visibility: PUBLIC|PRIVATE| ;

memberDecl :memberFuncDecl | memberVarDecl | ;
memberFuncDecl:   FUNCTION {insertdef();} ID {reservedWord($3);addtoSymbolTable("F");}: ( fParams ) arrow returnType ';' ;| constructor : ( fParams ) ';' ;
memberVarDecl :  ATTRIBUTE {insertdef();} ID {reservedWord($3);addtoSymbolTable("A"); } :  type arraySizeList ';'; 
arraySizeList : arraySizeList |arraySize |  ;
arraySize : "[" INTEGER "]" | "[" "]"  ;


funcDef :funcHead funcBody ;
funcHead : FUNCTION {insertdef();}  idsrTail  id {reservedWord($4);addtoSymbolTable("F");} ( fParams ) ARROW returnType {type_checkin_error($1,$6);} | FUNCTION VARIABLE sr CONSTRUCTOR ( fParams );
idsrTail :id sr| ;

funcBody : { localVarDeclOrStmtTail } ;
localVarDeclOrStmtTail : localVarDeclOrStmtTail| localVarDeclOrStmt |  ;

localVarDeclOrStmt : localVarDecl | statement  ;
localVarDecl :  LOCALVAR {insertdef();} ID {reservedWord($3); addtoSymbolTable("V");}":"  type arraySizeList ';' |  LOCALVAR {insertdef();} id  {reservedWord($3); addtoSymbolTable("V");} ":" type  ( aParams ) ';'  ;

statement : assignStat ; 
| IF {addtoSymbolTable("K");} ( relExpr ) THEN {addtoSymbolTable("K");} statBlock ELSE {addtoSymbolTable("K");} statBlock ; 
| WHILE {addtoSymbolTable("K");}  ( relExpr ) statBlock ;
| READ {addtoSymbolTable("K");} ( variable ) ;
| WRITE {addtoSymbolTable("K");}  ( expr ) ; 
| RETURN {addtoSymbolTable("K");} ( expr ) ; 
| functionCall ;  ;


assignStat : variable assignOp expr ; {type_checkin_error($1,$3);   

										int i,j;
                                        i=search($1);
                    					j=search($3);
                                        if(i==-1 || j==-1)
                                        printf("\n Undefined Variable");
                                        else
                   						addQuadruple("=","",$3,$1);
										fprintf(fpout,"MOV AX, %s",$3);
	
										} 


statBlock : { statementTail} | statement |  ; 
statementTail : statementTail | statement |  ;


expr : arithExpr | relExpr  ;
relExpr : arithExpr relOp arithExpr ;  {
	fprintf(fpout,"MOV AX, %s",$1);
	fprintf(fpout,"ASSIG AX, %s",$3);
}


arithExpr :term arithExprr {type_checkin_error($1,$2);}; 
arithExprr :addOp term arithExprr 
{
	
	if(strcmp($1,"+")){
		char str[5],str1[5]="t";
        sprintf(str, "%d", temp_var);   
        strcat(str1,str);
        temp_var++;
        addQuadruple("+",pop(),pop(),str1);                               
        push(str1);
		fprintf(fpout,"MOV AX, %s",$2);
		fprintf(fpout,"ADD AX, %s",$3);
		}

	}

	else if(strcmp($1,"-")){
		char str[5],str1[5]="t";
                    sprintf(str, "%d", temp_var);   
                    strcat(str1,str);
                    temp_var++;
                    addQuadruple("-",pop(),pop(),str1);                               
                    push(str1);
					fprintf(fpout,"MOV AX, %s",$2);
					fprintf(fpout,"MIN AX, %s",$3);
	}
	else{
		char str[5],str1[5]="t";
                    sprintf(str, "%d", temp_var);   
                    strcat(str1,str);
                    temp_var++;
                    addQuadruple("or",pop(),pop(),str1);                               
                    push(str1);
	}

 | ; 
					

sign: + | â€“ ;
term :factor termm ;
termm : multOp factor termm {
	
	if(strcmp($1,"*")){
		char str[5],str1[5]="t";
        sprintf(str, "%d", temp_var);       
		strcat(str1,str);
        temp_var++;
        addQuadruple("*",pop(),pop(),str1);
        push(str1);
		fprintf(fpout,"MOV AX, %s",$2);
		fprintf(fpout,"MUL AX, %s",$3);
	}
	else if(strcmp($1,"/")){
		char str[5],str1[5]="t";
        sprintf(str, "%d", temp_var);       

        strcat(str1,str);
        temp_var++;
        addQuadruple("/",pop(),pop(),str1);
        push(str1);
		fprintf(fpout,"MOV AX, %s",$2);
		fprintf(fpout,"DIV AX, %s",$3);
	}
	else{
		char str[5],str1[5]="t";
        sprintf(str, "%d", temp_var);       

        strcat(str1,str);
        temp_var++;
        addQuadruple("and",pop(),pop(),str1);
        push(str1);

	}


}|  ;

factor : VARIABLE 
{
	int i;
    i=search_symbol($1);
    if(i==-1)
    printf("\n Undefined Variable");
    else
    push($1);
	fprintf(fpout,"MOVE AX, %s",$1)
}
 | functionCall 
| intLtr {addtoSymbolTable("C");$$.nd=make_node(NULL,NULL,$1.name);  
				char temp[10];
                snprintf(temp,10,"%f",$1);   
        		push(temp);
				fprintf(fpout,"MOVE AX, %s",$1)}  //AX is the register
| floatLit {addtoSymbolTable("C"); 
				$$.nd=make_node(NULL,NULL,$1.name);
				char temp[10];
                snprintf(temp,10,"%f",$1);   
        		push(temp);
				fprintf(fpout,"MOV AX, %s",$1) //AX is the register
				} 
				
| ( arithExpr ) {fprintf(fpout,"MOV AX, %s",$1) //AX is the register}

| NOT {addtoSymbolTable("K"); } factor | SIGN factor;


variable : idnestList ID indiceList ;
idnestList :idnestList |idnest |  ;
indiceList : indiceList |idice |  ;

functionCall : idnestList ID  ( aParams ) ;

idnestList : idnest idnestList   ;
idnest : ID  indiceList '.' | ID {addtoSymbolTable("V"); } ( aParams ) '.'  ;

indice : '[' arithExpr ']' | ;


returnType : type | VOID ;
type : INTEGER {insertType();}| DOUBLE {insertType();}
										| ID  { int i;
                                        i=search($1);
                                        if(i==-1)
                                        printf("\n Undefined Variable");
                    					else
                    					push($1);};



fParams :  ID  ':' type arraySizeList fParamsTail | ;
aParams : expr aParamsTail | ; 

fParamsTail : fParamsTail| ',' ID : type arraySizeList | ;
aParamsTail :aParamsTail| ',' expr | ;


assignOp : = {addtoSymbolTable("OP");$$.nd=make_node(NULL,NULL,$1.name); };
relOp : EQOP {addtoSymbolTable("OP");$$.nd=make_node(NULL,NULL,$1.name); } |NEQ {addtoSymbolTable("OP");$$.nd=make_node(NULL,NULL,$1.name); } |GT {addtoSymbolTable("OP"); $$.nd=make_node(NULL,NULL,$1.name);} |LT {addtoSymbolTable("OP");$$.nd=make_node(NULL,NULL,$1.name); }| LE {addtoSymbolTable("OP");$$.nd=make_node(NULL,NULL,$1.name); }| GE {addtoSymbolTable("OP");$$.nd=make_node(NULL,NULL,$1.name); }  ;
addOp : + {addtoSymbolTable("OP"); $$.nd=make_node(NULL,NULL,$1.name);}| â€“ {addtoSymbolTable("OP");$$.nd=make_node(NULL,NULL,$1.name); }| OR {addtoSymbolTable("OP"); $$.nd=make_node(NULL,NULL,$1.name);};
multOp : * {addtoSymbolTable("OP"); $$.nd=make_node(NULL,NULL,$1.name); }| / {addtoSymbolTable("OP"); $$.nd=make_node(NULL,NULL,$1.name);} | AND {addtoSymbolTable("OP");$$.nd=make_node(NULL,NULL,$1.name); } ;




%%


/* error fucntion to encounter an error */
void yyerror(char *s) {
    fprintf(stdout, "%s\n", s);
}


FILE *yyin;
int main(void) {
    yyparse();
	FILE *fpInput;
	fpout = fopen("output.c","w");
     stk.top =-1;
   
    return 0;
}


/* search the data already available in symbol table */
int search(char *type) {
	int i;
	for(i=count-1; i>=0; i--) {
		if(strcmp(symbol_table[i].id_name, type)==0) {
			return -1;
			break;
		}
	}
	return 0;
}

void addtoSymbolTable(char c) {
  q=search(yytext);
  if(!q) {
    if(c == 'CL' && (strcpy(type2,"CLASS")==0)) {
			symbolTable[count].id=strdup(yytext);
			symbolTable[count].datatype=strdup("N/A");
			symbolTable[count].lineno=lineNum;
			symbolTable[count].type=strdup("Class\t");
			count++;
		}
		else if(c == 'K') {
			symbolTable[count].id=strdup(yytext);
			symbolTable[count].datatype=strdup("N/A");
			symbolTable[count].lineno=countn;
			symbolTable[count].type=strdup("Keyword\t");
			count++;
		}
		
		else if(c == 'OP') {
			symbolTable[count].id=strdup(yytext);
			symbolTable[count].datatype=strdup("N/A");
			symbolTable[count].lineno=countn;
			symbolTable[count].type=strdup("Operators");
			count++;
		}
		else if(c == 'F'&& (strcpy(type2,"FUNCTION")==0)) {
			
			symbolTable[count].id=strdup(yytext);
			symbolTable[count].datatype=strdup(type);
			symbolTable[count].lineno=countn;
			symbolTable[count].type=strdup("Function");
			count++;
		}

        else if(c == 'A' && (strcpy(type2,"ATTRIBUTE")==0)) {
			
			symbolTable[count].id=strdup(yytext);
			symbolTable[count].datatype=strdup(type);
			symbolTable[count].lineno=countn;
			symbolTable[count].type=strdup("Attribute");
			count++;
		}

        else if(c == 'V' && (strcpy(type2,"LOCALVAR")==0)) {
			symbolTable[count].id=strdup(yytext);
			symbolTable[count].datatype=strdup(type);
			symbolTable[count].lineno=countn;
			symbolTable[count].type=strdup("LocalVariable");
			count++;
		}

        }
	}
  




void insertType() {
	strcpy(type, yytext);
}

void insertdef() {
	strcpy(type2, yytext);
}

/* semantic checking functions */
void check_declaration(char *c) {
    q = search(c);
    if(!q) {
        sprintf(errors[sem_errors], "Line %d: Variable \"%s\" not declared before usage!\n", countn+1, c);
		sem_errors++;
    }
}

/* to check return type with declaration */
void check_return_type(char *value1,char *value2) {
	char *main_datatype = get_type(value2);
	char *return_datatype = get_type(value1);
	if((!strcmp(main_datatype, "int") && !strcmp(return_datatype, "CONST")) || !strcmp(main_datatype, return_datatype)){
		return ;
	}
	else {
		printf(errors[sem_errors], "Line %d: Return type mismatch\n", countn+1);
		sem_errors++;
	}
}

/* to compare types of variables, functions, classes*/ 
int check_types(char *type1, char *type2){
	// declaration with no init
	if(!strcmp(type2, "null"))
		return -1;
	// both datatypes are same
	if(!strcmp(type1, type2))
		return 0;
	// both datatypes are different
	if(!strcmp(type1, "int") && !strcmp(type2, "float"))
		return 1;
	if(!strcmp(type1, "float") && !strcmp(type2, "int"))
		return 2;
	if(!strcmp(type1, "int") && !strcmp(type2, "char"))
		return 3;
	if(!strcmp(type1, "char") && !strcmp(type2, "int"))
		return 4;
	if(!strcmp(type1, "float") && !strcmp(type2, "char"))
		return 5;
	if(!strcmp(type1, "char") && !strcmp(type2, "float"))
		return 6;
}

/* give error message for type mismatching errors */
void type_checking_error(char *type1, char *type2){
    int val=check_types(type1, type2);
    if(!val==0){
         printf("%s  at %d",yyerror( "Type Error"),symbol_table[i].lineno);

    }
}

/* to get data typr from the symbol table */
char *get_type(char *var){
	for(int i=0; i<count; i++) {
		
		if(!strcmp(symbol_table[i].id_name, var)) {
			return symbol_table[i].data_type;
		}
	}
}

/* checking reserved words are taking as variable names */ 

int reservedWord(char c){
    for(int i=0;21>i;i++){
        if(!strcmp(reserved[i], c)){
            printf("%s  at %d",yyerror( "a reserved key word"),symbol_table[i].lineno);

        }
    }
    return 0;
}


/* to push from stack */ 
void push(char *str)
{
  Stk.top++;
    Stk.items[Stk.top]=(char *)malloc(strlen(str)+1);
  strcpy(Stk.items[Stk.top],str);
}


/* to pop in to stack */
char * pop()
{
  int i;
  if(Stk.top==-1)
  {
     printf("\nStack Empty!! \n");
     exit(0);
  }
  char *str=(char *)malloc(strlen(Stk.items[Stk.top])+1);;
strcpy(str,Stk.items[Stk.top]);
  Stk.top--;
  return(str);
}

/* function to create 3 code structure */
void addQuadruple(char op[10],char op2[10],char op1[10],char res[10]){
                    strcpy(QUAD[Index].operator,op);
                    strcpy(QUAD[Index].operand2,op2);
                    strcpy(QUAD[Index].operand1,op1);
                    strcpy(QUAD[Index].result,res);
                    Index++;
}